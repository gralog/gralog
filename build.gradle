defaultTasks 'run'

apply plugin: 'java'


subprojects {
  repositories {
    mavenCentral()
  }

  apply plugin: 'java'

  // // Set up the style checker that checks indentation, naming
  // // conventions, etc.
  // apply plugin: 'checkstyle'
  // checkstyle {
  //   configFile = rootProject.file('config/checkstyle.xml')
  //   configProperties = [samedir: rootProject.file('config')]
  //   toolVersion = '7.8.1'
  // }
  // // Do not check generated files for programming style.
  // checkstyleMain {
  //   exclude '**/parser/*Scanner.java'
  //   exclude '**/parser/*ScannerToken.java'
  //   exclude '**/parser/*Parser.java'
  // }
}

check.dependsOn(subprojects.check)
clean.dependsOn(subprojects.clean)
test.dependsOn(subprojects.test)

task run

task (zipAll,
        dependsOn: build,
        type: Zip){
  archiveName = 'gralog-all.zip'
  from projectDir
  exclude 'build/distributions/**', '*TODO*',
          'anw*', 'install-linux/gralog',
          'build/libs', 'build/tmp', 'gradlew', 'gradlew.bat', '**/*aux', '**/*log', '**/*out',
          '**/auto/**'
}

task (zipJars,
        dependsOn: build,
        type: Zip){
  archiveName = 'gralog-bin.zip'
  from projectDir
  exclude 'build/distributions/**', 'gralog*/**', 'config/**', 'gradle/**', 'lib/**', '*TODO*',
          'anw*', 'build.gradle', 'settings.gradle', '.*/**', 'install-linux/gralog', 'build/test-results',
          'build/libs', 'build/tmp', 'build/dist/gralog', 'gradlew', 'gradlew.bat', '**/*aux', '**/*log', '**/*out',
          '**/auto/**'

}


// gralog-core provides some helper classes for the unit tests,
// so every other subproject depends on this.
configure(subprojects.findAll {it.name != 'gralog-core'}) {
  dependencies {
    testCompile project(':gralog-core').sourceSets.test.output
  }
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
  platform = 'win'
} else if (currentOS.isLinux()) {
  platform = 'linux'
} else if (currentOS.isMacOsX()) {
  platform = 'mac'
}
//If you want to include libraries for every module, do it here
subprojects {
  // All subprojects use junit and hamcrest for their tests.
  dependencies {
    //includes all libraries found in the lib folder
    compile fileTree(dir: "../lib", include: "*.jar")
    compile 'org.reflections:reflections:0.9.11'
    compile 'uk.com.robust-it:cloning:1.9.10'
    compile group: 'net.objecthunter', name: 'exp4j', version: '0.4.8'
    compile "org.openjfx:javafx-base:11:${platform}"
    compile "org.openjfx:javafx-graphics:11:${platform}"
    compile "org.openjfx:javafx-controls:11:${platform}"
    compile "org.openjfx:javafx-fxml:11:${platform}"
    compile "org.openjfx:javafx-web:11:${platform}"
    compile 'commons-io:commons-io:2.6'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
  }

  // Dependencies marked as "gralog" are considered to be internal and
  // will not be explicitly required (via classpath or linking) by the
  // jar files of the subprojects.  Every dependency must be properly
  // provided (via "compile") by exactly one project (usually
  // "gralog-fx").
  configurations {
    gralog
    compile.extendsFrom gralog
  }

  // Set up the parser/lexer generator.
  configurations {
    javaCup
    jflex
  }
  dependencies {
    javaCup 'com.github.vbmacher:java-cup:11b-20160615'
    jflex 'de.jflex:jflex:1.6.1'
  }
  ant.taskdef(
    classname: 'java_cup.anttask.CUPTask',
    name: 'cup', 
    classpath: configurations.javaCup.asPath)
  ant.taskdef(
    classname: 'jflex.anttask.JFlexTask',
    name: 'flex',
    classpath: configurations.jflex.asPath)

  project.ext.declareParserTasks = { params ->
    project.task('parser' + params.baseName, type: CupJFlex) {
      workingDir = params.workingDir
      baseName = params.baseName
    }
    project.task('parserClean' + params.baseName, type: Delete) {
      delete project.('parser' + params.baseName).generatedFiles()
    }
    project.clean.dependsOn('parserClean' + params.baseName)
    project.compileJava.dependsOn('parser' + params.baseName)
  }
}

project(':gralog-fx') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-finite-game')
    gralog project(':gralog-first-order-logic')
    gralog project(':gralog-dockfx')
  }
  // This subproject contains the main class.
  jar {
    manifest {
      attributes 'Main-Class': 'gralog.gralogfx.RunGralog'
    }
  }
}

// Configure the dependencies of the individual subprojects.  Rule:
// Use the "gralog" configuration for "gralog-" internal dependencies.
// Use the "compile" configuration for external dependencies.
project(':gralog-dockfx') {
  dependencies{

  }
}
project(':gralog-automaton') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/automaton/regularexpression/parser/',
    baseName: 'RegularExpression')
}

project(':gralog-computation-tree-logic') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/computationtreelogic/parser/',
    baseName: 'ComputationTreeLogic')
}

project(':gralog-finite-game') {
  dependencies {
    gralog project(':gralog-core')
  }
}

project(':gralog-first-order-logic') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-finite-game')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/firstorderlogic/parser',
    baseName: 'FirstOrder')
}

project(':gralog-modal-logic') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/modallogic/parser',
    baseName: 'ModalLogic')
}

project(':gralog-modal-mu-calculus') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-finite-game')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/modalmucalculus/parser',
    baseName: 'ModalMuCalculus')
}

project(':gralog-np-completeness') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/npcompleteness/propositionallogic/parser/',
    baseName: 'PropositionalLogic')
}

project(':gralog-jgrapht-bridge') {
  dependencies {
    gralog project(':gralog-core')
    compile 'org.jgrapht:jgrapht-core:0.9.2'
  }
}
// Let the subproject jars explicitly depend on their dependencies.
subprojects {
  jar {
    manifest {
      attributes 'Class-Path':
        (configurations.runtime - configurations.gralog).files.collect {
          it.getName() }.join(' ')
    }
  }
}

def distDir = 'dist'
def libsDir = distDir + '/libs'

// Copy the true (not gralog-internal) dependencies of subprojects
// into the root build/dist/libs dir.
subprojects {
  task collectSubprojectDependencies(type: Copy, dependsOn: jar) {
    from ((configurations.runtime - configurations.gralog).files)
    into new File(rootProject.buildDir, libsDir)
  }
}

// Collect all subproject jars and the central config file.
task copySubprojects(type: Copy) {
  dependsOn subprojects.collectSubprojectDependencies
  from (subprojects.buildDir.collect { new File(it, 'libs') })
  into new File(rootProject.buildDir, libsDir)
  exclude 'gralog-fx.jar'
}

// The main project needs a special configuration: First, we want to
// copy it and its configuration directly to the dist directory and
// not to dist/libs.  Second, we need to fix the class-path for the
// dependencies of the main project to point to the libs directory.
project(':gralog-fx') {
  task copyMainProject(type: Copy) {
    from new File(project.buildDir, 'libs/gralog-fx.jar')
    from project.file('src/main/java/gralog/gralogfx/config.xml')
    into new File(rootProject.buildDir, distDir)
  }
  jar.finalizedBy(copyMainProject)
  jar {
    manifest {
      attributes 'Class-Path':
        configurations.gralog.files.collect { 'libs/' + it.getName() }.join(' ')
    }
  }
}

compileJava.dependsOn(copySubprojects)


// We need to start gralog as a jar because it uses some crazy
// reflection.
run.dependsOn(copySubprojects)
run.doLast {
  javaexec {
    main = '-jar'
    args new File(rootProject.buildDir, distDir + '/gralog-fx.jar')
  }
}

task(debug, dependsOn: copySubprojects, type: JavaExec) {
  main = '-jar'
  args new File(rootProject.buildDir, distDir + '/gralog-fx.jar')
  jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005']
}

// Copy subproject test reports to the root so that netbeans (and
// maybe other tools) can find them.
subprojects {
  task copyReport(type: Copy) {
    from new File(project.buildDir, 'test-results')
    into new File(rootProject.buildDir, 'test-results')
  }
  test.finalizedBy(copyReport)
}

// A custom task to generate a parser/lexer with cup/jflex.
class CupJFlex extends DefaultTask {
  String workingDir
  String baseName;

  def jflexFile() { baseName + 'Scanner.jflex' }
  def parserFile() { baseName + 'Parser' }
  def cupFile() { parserFile() + '.cup' }
  def scannerTokenFile() { baseName + 'ScannerToken' }

  // The list of generated files that will be deleted during "clean".
  def generatedFiles() {
    [ parserFile() + '.java',
      baseName + 'Scanner.java',
      baseName + 'Scanner.java~',
      scannerTokenFile() + '.java' ].collect {
      project.file('src/main/java' + '/' + workingDir + '/' + it)
    }
  }

  @TaskAction
  def runCupJFlex() {
    ant.cup(
      srcfile: [ project.file('src/main/java'), workingDir, cupFile() ].join('/'),
      destdir: project.file('src/main/java'),
      parser: parserFile(),
      symbols: scannerTokenFile())
    ant.flex(file: [ project.file('src/main/java'), workingDir, jflexFile() ].join('/'))
  }
}

