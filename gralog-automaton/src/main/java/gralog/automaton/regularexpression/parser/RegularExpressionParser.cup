package gralog.automaton.regularexpression.parser;

import java_cup.runtime.*;
import gralog.algorithm.ParseError;
import gralog.automaton.regularexpression.*;
import java.io.StringReader;

parser code {:

    private String inputString;
    String errorMsg = null;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    @Override
    public void report_fatal_error(String message, Object info) throws ParseError
    {
        java_cup.runtime.ComplexSymbolFactory.ComplexSymbol symbol = (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)info;
        throw new ParseError("Unexpected " + symbol.getName(), inputString, symbol.xleft.getColumn());
    }

    static public RegularExpression parseString(String str) throws Exception
    {
        RegularExpressionParser parser = new RegularExpressionParser(
                new RegularExpressionScanner(new StringReader(str)),
                new java_cup.runtime.ComplexSymbolFactory());
        parser.inputString = str;
        Symbol parserresult = parser.parse();
        return (RegularExpression) parserresult.value;
    }
:}

terminal PARENTHESISLEFT, PARENTHESISRIGHT, KLEENESTAR, ALTERNATION;
terminal Character LETTER;
non terminal RegularExpression alternation, concatenation, starred, atomic;

alternation ::=
    alternation:l ALTERNATION concatenation:r
        {: RESULT = new RegularExpressionAlternation(l, r); :}
    | concatenation:r
        {: RESULT = r; :}
    ;

concatenation ::=
    concatenation:l starred:r
        {: RESULT = new RegularExpressionConcatenation(l, r); :}
    | starred:r
        {: RESULT = r; :}
    ;

starred ::=
    atomic:r KLEENESTAR
        {: RESULT = new RegularExpressionKleeneStar(r); :}
    | atomic:r
        {: RESULT = r; :}
    ;

atomic ::=
    LETTER:c
        {: RESULT = new RegularExpressionLetter(c); :}
    | PARENTHESISLEFT alternation:r PARENTHESISRIGHT
        {: RESULT = r; :}
    ;
